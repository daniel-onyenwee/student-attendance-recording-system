generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Level {
  L_100
  L_200
  L_300
  L_400
  L_500
  L_600
  L_800
  L_900
  L_1000
}

enum Gender {
  MALE
  FEMALE
}

enum UserType {
  ADMIN
  LECTURER
  STUDENT
}

model User {
  id           String     @id @default(uuid())
  type         UserType
  refreshToken String     @unique @map("refresh_token")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  metadata     Json       @default("{}")
  admins       Admin[]
  lecturers    Lecturer[]
  students     Student[]

  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  metadata  Json     @default("{}")

  @@map("admins")
}

model Faculty {
  id          String       @id @default(uuid())
  name        String
  departments Department[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  metadata    Json         @default("{}")

  @@map("faculties")
}

model Department {
  id        String     @id @default(uuid())
  name      String
  faculty   Faculty    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  facultyId String     @map("faculty_id")
  levels    Level[]    @default([L_100])
  courses   Course[]
  lecturers Lecturer[]
  students  Student[]
  metadata  Json       @default("{}")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("departments")
}

model Course {
  id           String     @id @default(uuid())
  title        String
  code         String     @unique
  level        Level
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String     @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  metadata     Json       @default("{}")

  @@map("courses")
}

model Lecturer {
  id           String     @id @default(uuid())
  name         String
  gender       Gender     @default(MALE)
  username     String     @unique
  password     String
  user         User       @relation(fields: [id], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId String     @map("department_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  metadata     Json       @default("{}")

  @@map("lecturers")
}

model Student {
  id           String     @id @default(uuid())
  name         String
  regno        String     @unique
  password     String
  gender       Gender     @default(MALE)
  level        Level
  faceImage    String     @map("face_image")
  user         User       @relation(fields: [id], references: [id], onDelete: Cascade)
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  metadata     Json       @default("{}")

  @@map("students")
}
